Manus, your task is to develop a web application that features a self-playing Pac-Man style game. The game should run autonomously with AI controlling Pac-Man's movement to collect pellets while avoiding ghosts, and users should be able to watch the gameplay unfold. Below are the detailed requirements to guide your development process.

Requirements:
1. Game Interface
Design: Create a maze-based game UI that includes:
A maze structure with walls and pathways.
A Pac-Man character controlled by the AI.
Multiple ghost characters with basic AI movement.
Pellets distributed throughout the maze pathways.
Optional: Power pellets that temporarily make ghosts vulnerable.
A score counter showing pellets collected or points earned.
A display for remaining lives.
Responsiveness: Ensure the interface scales reasonably, though the maze might have a fixed aspect ratio.
Optional Enhancements: Consider adding features like fruit bonuses, different ghost behaviors (Blinky, Pinky, Inky, Clyde archetypes), or level progression with increasing difficulty.

2. AI Implementation (Pac-Man)
Algorithm: Implement a pathfinding algorithm (like A* or a simpler heuristic search) for Pac-Man to navigate the maze.
Strategy: Program the Pac-Man AI to prioritize collecting nearby pellets while actively avoiding ghosts. If power pellets are implemented, the AI should decide when to strategically eat them and hunt vulnerable ghosts.
Decision Making: The AI needs to constantly evaluate the best direction to move based on pellet locations and ghost proximity/state.
Visualization: Provide visual cues to indicate Pac-Man's intended path or target pellet (optional).

3. AI Implementation (Ghosts)
Algorithm: Implement basic movement patterns for ghosts (e.g., simple pathfinding towards Pac-Man, random movement, or patrolling specific areas).
Strategy: Ghosts should generally try to intercept or corner Pac-Man. If power pellets are active, ghosts should switch to an "evade" behavior.
Coordination: Optionally, implement simple coordination or distinct behaviors for different ghosts.

4. Game Mechanics
Basic Rules: Pac-Man moves through the maze eating pellets. Ghosts chase Pac-Man. Contact with a ghost costs a life. Eating all pellets clears the level.
Movement: Implement grid-based movement for Pac-Man and ghosts within the maze pathways.
Pellet Collection: Remove pellets when Pac-Man moves over them and update the score.
Collision Detection: Detect collisions between Pac-Man and ghosts. Handle life loss or ghost vulnerability based on game state (power pellet active).
Game Over Conditions: End the game when Pac-Man runs out of lives.
Level Clear: Clear the level when all pellets are eaten.
Autonomous Restart: After a game over or level clear, automatically restart the level or proceed to the next after a brief pause.

5. Technical Implementation
Frontend: Use vanilla JavaScript, HTML, and CSS (Canvas is suitable) or choose a framework such as React or Vue.js.
Animation: Implement smooth animations for character movement and state changes (e.g., vulnerable ghosts).
Game Loop: Create an efficient game loop managing AI decisions, character movement, collision detection, pellet collection, and rendering.
Maze Representation: Use a suitable data structure (e.g., 2D array) to represent the maze layout and facilitate pathfinding.

6. User Experience
Initial State: When the user opens the app, display a brief introduction and automatically start the game:
"Welcome to Self-Playing Pac-Man! Watch the AI navigate the maze."
Visual Feedback: Ensure clear visual feedback for pellet collection, ghost interactions (capture/vulnerability), life loss, level clear, and game over.

7. Additional Notes
Performance: Optimize the game, especially AI pathfinding calculations, to ensure smooth gameplay.
Focus: Prioritize creating believable AI behavior for both Pac-Man (pellet seeking, ghost avoidance) and the ghosts (pursuit/evasion).
Customization: Consider allowing users to adjust game speed, number of ghosts, or starting level.

By following these guidelines, you will create a webapp that offers users an engaging self-playing Pac-Man style game. The application should be functional, visually appealing, and showcase interesting AI interactions within the maze.
